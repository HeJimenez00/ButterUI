---
import { navigationConfig } from "src/config/navigation-config";
import { SidebarToggle } from "../components/SidebarToggle.jsx";
import Spotlight from "./Spotlight.astro";

const sideNavbarItems = navigationConfig.sidebarNavbar ?? [];
const { pathname } = Astro.url;

const cleanPathname = pathname.endsWith("/") ? pathname.slice(0, -1) : pathname;
---

<nav
  id="sidebar"
  class="sidebar bg-neutral-white lg:bg-transparent dark:bg-fg-secondary-dark dark:lg:bg-transparent md:border-0"
>
  <SidebarToggle client:load> Menu </SidebarToggle>
  <Spotlight />
  <div id="sidebar-content" class="sidebar-items hidden lg:block">
    {
      sideNavbarItems.map((section, idx) => (
        <div class="px-5 lg:px-0 mt-5 md:mt-0">
          <h4 class="pb-2 text-small">{section.title}</h4>
          <ul class="items flex flex-col gap-[2px] mb-6">
            {sideNavbarItems[idx]?.items?.map(({ href, title }) => (
              <li
                class:list={[
                  cleanPathname === href &&
                    "bg-fg-secondary dark:bg-fg-secondary-dark rounded-xl",
                ]}
              >
                <a
                  href={href}
                  class="relative z-10 block text-small py-[6px]"
                  class:list={[
                    cleanPathname === href &&
                      "text-primary dark:text-primary-dark pl-3 sidebar-item-active",
                    cleanPathname !== href &&
                      "text-ghost dark:text-ghost-dark hover:text-primary hover:dark:text-primary-dark transition-colors duration-200 sidebar-item",
                  ]}
                >
                  {title}
                </a>
              </li>
            ))}
          </ul>
        </div>
      ))
    }
  </div>
</nav>

<script>
  import { gsap } from "gsap";

  const sidebarLeft = document.querySelector(".sidebar") as HTMLElement;
  const items = sidebarLeft?.querySelector(".sidebar-items");
  const button = sidebarLeft?.querySelector(".sidebar-icon");

  const computedStyle = window.getComputedStyle(sidebarLeft);

  button?.addEventListener("click", () => {
    items?.classList.toggle("hidden");
    if (computedStyle.height === "41px") {
      sidebarLeft.style.height = "100%";
    } else {
      sidebarLeft.style.height = "41px";
    }
  });

  function foo(ev: Event, isEnter: Boolean) {
    const element = ev.target as HTMLElement;
    const item = element.closest(".sidebar-item");

    if (item) {
      gsap.to(item, {
        x: isEnter ? 12 : 0,
        duration: 0.35,
        ease: "power4.out",
      });
    }
  }

  sidebarLeft?.addEventListener("mouseenter", (ev) => foo(ev, true), true);
  sidebarLeft?.addEventListener("mouseleave", (ev) => foo(ev, false), true);
</script>

<script>
  import { gsap } from "gsap";
  import { $ } from "../utils/selector.ts";

  const panel = $("#panel");
  const sidebarContent = $("#sidebar-content"); // Cambiamos a seleccionar solo el contenido
  const search = $("#search");
  let isVisible = true;

  const threshold = sidebarContent.clientWidth;

  panel?.addEventListener("click", () => {
    gsap.to([sidebarContent, search], {
      autoAlpha: isVisible ? 0 : 1,
      duration: 0.6,
      x: isVisible ? -20 : 0,
      ease: "power4.out",
    });
    gsap.to(panel, {
      x: isVisible ? -threshold + 32.98 : 0,
      duration: 0.6,
      ease: "power4.out",
    });
    isVisible = !isVisible;
  });
</script>
