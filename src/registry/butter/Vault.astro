---
interface VaultProps {
  label: string;
  labelClass: string;
  vaultClass: string;
  footerClass: string;
  overlayClass: string;
  notchClass: string;
  easeOpen: string;
  easeStretch: string;
  durationOpen: number;
  durationStretch: number;
}
const {
  // comportamiento
  label = "Vault",
  labelClass = "",
  vaultClass = "",
  footerClass = "",
  notchClass = "",

  //animaciones
  easeOpen = "power4.out",
  easeStretch = "elastic(1, 0.75)",
  durationOpen = 0.4,
  durationStretch = 0.5,
} = Astro.props as VaultProps;
---

<button class:list={["cursor-pointer", labelClass]} id="button-vault"
  >{label}</button
>

<div
  class:list={[
    "fixed bottom-0 right-0 left-0 w-full origin-bottom-left max-h-3/4 overflow-y-scroll",
    vaultClass,
  ]}
  id="Vault"
  data-ease-open={easeOpen}
  data-ease-stretch={easeStretch}
  data-duration-open={durationOpen}
  data-duration-stretch={durationStretch}
>
  <div
    class="absolute w-full h-full max-h-3/4 rounded-t-xl"
    id="vault-container"
  >
    <span
      id="vault-notch"
      class="w-full h-full relative block py-5 hover:cursor-grab active:cursor-grabbing"
    >
      <div class:list={["w-[10%] h-2 mx-auto rounded-full", notchClass]}></div>
    </span>

    <div class="w-full h-12"></div>
    <div class="max-w-xl mx-auto">
      <!-- esto sera el contenido del ussario -->
      <slot />
    </div>
  </div>
</div>

<div
  class:list={[
    "w-full h-16 fixed translate-y-full bottom-0 right-0 left-0",
    footerClass,
  ]}
  id="vault-footer"
>
</div>

<div
  class="bg-black w-screen h-screen fixed top-0 left-0 z-30 opacity-0 invisible"
  id="vault-overlay"
>
</div>

<script>
  import { gsap } from "gsap";

  const $ = (selector: string, context: Document | HTMLElement = document) => {
    return context.querySelector(selector);
  };

  const vault = {
    vault: $("#Vault"),
    trigger: $("#button-vault"),
    notch: $("#vault-notch"),
    footer: $("#vault-footer"),
    overlay: $("#vault-overlay"),
  };

  const easeOpen = vault.vault?.dataset.easeOpen;
  const easeStretch = vault.vault?.dataset.easeStretch;
  const durationOpen = Number(vault.vault?.dataset.durationOpen);
  const durationStretch = Number(vault.vault?.dataset.durationStretch);

  document.addEventListener("DOMContentLoaded", () => {
    //Pasar el vault al body para que no colapse si se tiene en algun contenedor dentro con valores overflow-hidden, relative etc...
    document.body.appendChild(vault.vault as HTMLElement);
    document.body.appendChild(vault.footer as HTMLElement);
    document.body.appendChild(vault.overlay as HTMLElement);

    // muestra el vault
    vault.trigger?.addEventListener("click", () => openVault());

    // activar la sensación de arrastre
    vault.notch?.addEventListener("mousedown", (event: Event) =>
      vaultDrag(event),
    );

    // cuando se este arrastrando necesitamos que se mueva respecto a la posición actual del mouse
    window.addEventListener("mousemove", (event) => vaultMove(event));

    // Se ejecuta cuando se suelta el vault
    window.addEventListener("mouseup", () => vaultDrop());

    // se ejecuta cuando se presiona en el overlay
    vault.overlay?.addEventListener("click", () => showOverlay());
  });

  //animations
  const animationDefaults = {
    easeContainer: easeOpen,
    easeNotch: easeStretch,
    durationContainer: durationOpen,
    durationNotch: durationStretch,
  };

  let isVaultVisible = false,
    isDragging = false,
    offset = { y: 0 },
    startY = 0;

  const animationSettings = {
    vault: {
      ease: animationDefaults.easeContainer,
      duration: animationDefaults.durationContainer,
    },
    notch: {
      ease: animationDefaults.easeNotch,
      duration: animationDefaults.durationNotch,
    },
    stretch: {
      ease: animationDefaults.easeNotch,
      duration: animationDefaults.durationContainer,
    },
  };

  function openVault(y = 0) {
    isVaultVisible = true;

    document.body.style.overflow = "hidden";

    gsap.to(vault.vault, { y, ...animationSettings.vault });
    gsap.to(vault.footer, { y, ...animationSettings.vault });
    gsap.to(vault.overlay, {
      opacity: 0.3,
      duration: 0.3,
      visibility: "visible",
    });
  }

  function vaultDrag(event) {
    event.preventDefault();
    isDragging = true;
    //recuperar la posición del vault desde el notch
    offset.y = event.clientY;
  }

  function vaultMove(event) {
    if (isDragging && isVaultVisible) {
      startY = event.clientY - offset.y;

      if (startY > 0) {
        gsap.to(vault.vault, {
          y: startY,
          // importante que sea 0.3, para que la animación sea natural sino se sentira lenta cuando se coloque un valor mayor
          duration: 0.3,
          ease: animationSettings.vault.ease,
        });
      } else {
        // Se deforma el vaul por que se estira demasiado haciá arriba (StartY es menor a 0)
        //se espera: recuperamos la posición de startY y la multiplicamos por un numero pequeño para que cuando se estire de la sensación de menor movimiento, obligando al usuario a soltar, en otras palabras
        //-400 (startY) * -0.000113 = -0.0452
        //-600 (startY) * -0.000113 = -0.0678
        const stretch = startY * -0.000113;
        gsap.to(vault.vault, {
          scaleY: 1 + stretch,
          ...animationSettings.stretch,
        });
      }
    }
  }

  function vaultDrop() {
    isDragging = false;

    if (isVaultVisible) {
      gsap.to(vault.vault, {
        scaleY: 1,
        ...animationSettings.notch,
      });

      //calculamos el valor del tamaño de pantalla para poder cambiarlo y no haya mucha animación y tenga un limite natural
      const matchMedia = window.matchMedia("(min-width: 1600px)").matches
        ? 0.25
        : 0.4;
      // console.log(startY, offset.y * matchMedia);
      //el bug esta en que el valor se queda tal cual cuando borro, por lo que necesito reiniciarlo

      if (startY > offset.y * matchMedia) {
        gsap.to([vault.vault, vault.footer], {
          y: "100%",
          ...animationSettings.vault,
        });

        gsap.to(vault.overlay, { opacity: 0, duration: 0.3 });

        setTimeout(() => {
          gsap.to(vault.overlay, {
            visibility: "hidden",
          });
        }, 300);

        isVaultVisible = false;
        startY = 0;

        document.body.style.overflow = "visible";
      } else {
        gsap.to(vault.vault, {
          y: 0,
          ...animationSettings.notch,
        });
      }
    }
  }

  function showOverlay() {
    // verificamos que isVaultVisible este mostrandose y el isDragging no se este moviendo
    if (isVaultVisible && !isDragging) {
      gsap.to([vault.vault, vault.footer], {
        y: "100%",
        bottom: 0,
        duration: animationDefaults.durationNotch,
        ease: "power4.out",
      });

      gsap.to(vault.overlay, {
        opacity: 0,
        duration: 0.3,
      });

      setTimeout(() => {
        gsap.to(vault.overlay, {
          visibility: "hidden",
        });
      }, 300);

      document.body.style.overflow = "visible";
      isVaultVisible = false;
    }
  }
</script>
